import unittest
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from src.entity.models import Base, User
from src.schemas.user import UserSchema
from src.repository.users import (
    get_user_by_email,
    create_user,
    update_token,
    confirmed_email
)

# üéØ –°—Ç–≤–æ—Ä—é—î–º–æ in-memory SQLite –±–∞–∑—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
SQLALCHEMY_DATABASE_URL = "sqlite:///:memory:"
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


class TestUserRepository(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç—ñ–≤."""
        Base.metadata.create_all(bind=engine)

    @classmethod
    def tearDownClass(cls):
        """–ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤."""
        Base.metadata.drop_all(bind=engine)

    def setUp(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É."""
        self.db = TestingSessionLocal()

    def tearDown(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É."""
        self.db.close()

    def get_sample_user(self):
        """–ü—Ä–∏–∫–ª–∞–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è."""
        return UserSchema(
            username="testuser",
            email="test@example.com",
            password="12345678"
        )

    def test_create_user(self):
        """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        sample_user = self.get_sample_user()
        user = create_user(sample_user, self.db)
        self.assertIsNotNone(user.id)
        self.assertEqual(user.email, "test@example.com")
        self.assertEqual(user.username, "testuser")

    def test_get_user_by_email(self):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ email."""
        sample_user = self.get_sample_user()
        create_user(sample_user, self.db)
        user = get_user_by_email("test@example.com", self.db)
        self.assertIsNotNone(user)
        self.assertEqual(user.email, "test@example.com")

    def test_update_token(self):
        """–¢–µ—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        sample_user = self.get_sample_user()
        user = create_user(sample_user, self.db)
        update_token(user, "new_refresh_token", self.db)
        updated_user = get_user_by_email("test@example.com", self.db)
        self.assertEqual(updated_user.refresh_token, "new_refresh_token")

    def test_confirmed_email(self):
        """–¢–µ—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        sample_user = self.get_sample_user()
        create_user(sample_user, self.db)
        confirmed_email("test@example.com", self.db)
        user = get_user_by_email("test@example.com", self.db)
        self.assertTrue(user.confirmed)


if __name__ == "__main__":
    unittest.main()
